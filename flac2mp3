#!/usr/bin/python3
"""Transencode FLAC files to MP3 or ALAC while preserving metadata."""

# Copyright (C) 2009-2010, 2013, 2019-2020  Courtney Bane

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import multiprocessing
import os
import pathlib
import subprocess
import sys

import mutagen.flac
import mutagen.id3

tag_mapping = {
    "artist": mutagen.id3.TPE1,
    "albumartist": mutagen.id3.TPE2,
    "album": mutagen.id3.TALB,
    "title": mutagen.id3.TIT2,
    "date": mutagen.id3.TDRC,
    "discnumber": mutagen.id3.TPOS,
    "composer": mutagen.id3.TCOM,
}
txxx_tags = set([
    "replaygain_track_gain",
    "replaygain_track_peak",
    "replaygain_album_gain",
    "replaygain_album_peak",
])


def main():
    """The main logic of the program"""
    args = parse_args()

    joblist = []

    destdirs = {}
    for sourcefile in args.files:
        destfile = os.path.join(args.outdir, args.make_destfile(sourcefile))
        destdir = os.path.dirname(destfile)

        if destdir not in destdirs:
            pathlib.Path(destdir).mkdir(parents=True, exist_ok=True)
            destdirs[destdir] = True

        entry = {'source': sourcefile, 'dest': destfile}
        joblist.append(entry)

    pool = multiprocessing.Pool(processes=args.jobs)
    for entry in joblist:
        pool.apply_async(args.do_encode, args=(args, entry['source'], entry['dest']))
    pool.close()
    try:
        pool.join()
    except KeyboardInterrupt:
        pool.terminate()
        pool.join()
        sys.exit(1)


def replace_extension(filename, new_ext):
    return os.path.splitext(filename)[0] + '.' + new_ext


def make_destfile_mp3(sourcefile):
    return replace_extension(sourcefile, "mp3")


def make_destfile_alac(sourcefile):
    return replace_extension(sourcefile, "m4a")


def parse_args():
    prog_name = os.path.basename(sys.argv[0])
    if prog_name == 'flac2mp3':
        args = parse_args_mp3()
    elif prog_name == 'flac2alac':
        args = parse_args_alac()

    if args.jobs == 0:
        args.jobs = len(os.sched_getaffinity(0))

    return args


def parse_args_mp3():
    description = \
        "Transencodes the specified FLAC files to MP3, while preserving as " \
        "much metadata as possible."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-j', '--jobs', type=int, dest='jobs',
                        default=0, metavar='JOBS',
                        help='number of transencodes to run in parallel (0=number of CPUs)')
    parser.add_argument('-o', '--output', dest='outdir', default='.',
                        metavar='DIR', help='output directory')
    parser.add_argument('-V', metavar='QUALITY', type=qual_float, dest='qual',
                        default=0, help='LAME VBR quality setting')
    parser.add_argument('files', metavar='FILE', nargs='+',
                        help='FLAC file(s) to transencode')

    parser.set_defaults(make_destfile=make_destfile_mp3, do_encode=do_encode_mp3)

    return parser.parse_args()


def parse_args_alac():
    description = \
        "Transencodes the specified FLAC files to ALAC, while preserving as " \
        "much metadata as possible."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-j', '--jobs', type=int, dest='jobs',
                        default=0, metavar='JOBS',
                        help='number of transencodes to run in parallel (0=number of CPUs)')
    parser.add_argument('-o', '--output', dest='outdir', default='.',
                        metavar='DIR', help='output directory')
    parser.add_argument('files', metavar='FILE', nargs='+',
                        help='FLAC file(s) to transencode')

    parser.set_defaults(make_destfile=make_destfile_alac, do_encode=do_encode_alac)

    return parser.parse_args()


def qual_float(x):
    x = float(x)
    if x < 0.0 or x >= 10.0:
        raise argparse.ArgumentTypeError("%r not in range [0, 10)" % (x,))
    return x


def do_encode_mp3(args, source, dest):
    """Perform the transencode to MP3, and copy the metadata"""
    try:
        print(source)

        metadata = get_flac_metadata(source)

        pargs = ["flac", "--decode", "--silent", "--stdout", source]
        flacp = subprocess.Popen(pargs, stdout=subprocess.PIPE,
                                 bufsize=1024*1024)

        pargs = ["lame", "--quiet", "--noreplaygain", "-V", str(args.qual),
                 "--add-id3v2", '-', dest]
        lamep = subprocess.Popen(pargs, stdin=flacp.stdout, bufsize=0)

        flacp.wait()
        lamep.wait()

        add_mp3_metadata(dest, metadata)
    except KeyboardInterrupt:
        try:
            os.unlink(dest)
        except OSError:
            pass
        flacp.terminate()
        lamep.terminate()
        flacp.wait()
        lamep.wait()


def do_encode_alac(args, source, dest):
    try:
        print(source)

        ffmpeg_args = ["ffmpeg", "-loglevel", "fatal", "-i", source,
                       "-acodec", "alac", "-vcodec", "copy", dest]
        ffmpeg = subprocess.Popen(ffmpeg_args)

        ffmpeg.wait()
    except KeyboardInterrupt:
        try:
            os.unlink(dest)
        except OSError:
            pass
        ffmpeg.terminate()
        ffmpeg.wait()


def get_flac_metadata(source):
    """Get the metadata from a flac file"""
    return mutagen.flac.FLAC(source)


def add_mp3_metadata(dest, metadata):
    """Store the specified metadata to the MP3 file"""
    tags = {}
    for tag, value in metadata.tags:
        tags[tag.lower()] = value
    id3 = mutagen.id3.ID3(dest)
    for tag, value in tags.items():
        if tag in tag_mapping:
            id3.add(tag_mapping[tag](encoding=3, text=value))
        elif tag in txxx_tags:
            id3.add(mutagen.id3.TXXX(encoding=0, desc=tag.upper(), text=value))

    if "tracknumber" in tags:
        if "tracktotal" in tags:
            tracknum = "{0[tracknumber]}/{0[tracktotal]}".format(tags)
        elif "totaltracks" in tags:
            tracknum = "{0[tracknumber]}/{0[totaltracks]}".format(tags)
        else:
            tracknum = str(int(tags["tracknumber"]))
        id3.add(mutagen.id3.TRCK(encoding=3, text=tracknum))

    for picture in metadata.pictures:
        id3.add(mutagen.id3.APIC(type=picture.type, mime=picture.mime,
                                 encoding=3, desc=picture.desc,
                                 data=picture.data))

    convert_replaygain(metadata, id3)

    id3.save(v1=2)


def convert_replaygain(flac, id3):
    """Converts FLAC ReplayGain tags to iTunes Sound Check ID3 comment."""
    if "REPLAYGAIN_ALBUM_GAIN" in flac.tags and \
            "REPLAYGAIN_ALBUM_PEAK" in flac.tags:
        gain = float(flac.tags["REPLAYGAIN_ALBUM_GAIN"][0].split(" ")[0])
        peak = float(flac.tags["REPLAYGAIN_ALBUM_PEAK"][0])
        sc_gain_1000 = gain_to_sc(gain, 1000)
        sc_gain_2500 = gain_to_sc(gain, 2500)
        sc_peak = peak_to_sc(peak)
        soundcheck = [
            sc_gain_1000, sc_gain_1000,
            sc_gain_2500, sc_gain_2500,
            "0002CA8", "0002CA8",
            sc_peak, sc_peak,
            "0002CA8", "0002CA8",
        ]
        id3.add(mutagen.id3.COMM(encoding=0, desc="iTunNORM", lang="eng",
                                 text=" ".join(soundcheck)))


def gain_to_sc(gain, base):
    """Converts a ReplayGain gain value to iTunes Sound Check format."""
    result = int(round((10 ** (-gain / 10)) * base))
    if result > 65534:
        result = 65534
    return "{0:08X}".format(result)


def peak_to_sc(peak):
    """Converts a ReplayGain peak value to iTunes Sound Check format."""
    return "{0:08X}".format(int(round(peak * 32767)))


if __name__ == "__main__":
    main()
