#!/usr/bin/python

import os, sys, getopt, subprocess, signal

metaflac = "metaflac"
lame = "lame"
tag_mapping = { "artist": "--ta",
                "album": "--tl",
                "title": "--tt",
                "date": "--ty",
                "discnumber": "--TPOS" }

def usage():
    print("Usage: %s [ -o <base output dir> ] file [ file ... ]" % os.path.basename(sys.argv[0]))

def get_flac_tags(source):
    tags = {}
    reader = subprocess.Popen(["metaflac", "--export-tags-to=-", source], stdout=subprocess.PIPE)
    reader.wait()
    for line in reader.stdout.readlines():
        (tag, value) = line.split("=", 1)
        if len(value.strip()) > 0:
            tags[tag.lower()] = value.strip()
    return tags

def do_encode(source, dest):
    print(source)

    args = [lame, "--quiet", "--noreplaygain", "-V", "0", "--add-id3v2"]

    flac_tags = get_flac_tags(source)
    for tag in ["artist", "album", "title", "date"]:
        if tag in flac_tags:
            val = flac_tags[tag]
            args.extend([ tag_mapping[tag], val ])

    if "tracknumber" in flac_tags:
        if "tracktotal" in flac_tags:
            args.extend(['--tn', '%s/%s' % (flac_tags['tracknumber'], flac_tags['tracktotal'])])
        elif "totaltracks" in flac_tags:
            args.extend(['--tn', '%s/%s' % (flac_tags['tracknumber'], flac_tags['totaltracks'])])
        else:
            args.extend(['--tn', flac_tags['tracknumber']])

    if "discnumber" in flac_tags:
        args.extend(['--tv', 'TPOS=%s' % (flac_tags['discnumber'])])
        
    args.extend([source, dest])
    
    subprocess.call(args)

def do_background_encode(source, dest):
    if os.fork() != 0:
        return
    else:
        do_encode(source, dest)
        sys.exit(0)

def main(argv):
    outdir = ""
    parallel = 1
    
    try:
        optlist, args = getopt.getopt(argv, "o:j:")
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(1)
    for opt, arg in optlist:
        if opt == "-o":
            outdir = arg
        elif opt == "-j":
            parallel = int(arg)
        else:
            assert False, "unhandled option"
    
    filelist = []

    for file in args:
        destfile = os.path.join(outdir, os.path.splitext(file)[0] + ".mp3")
        destdir = os.path.dirname(destfile)
        
        try:
            os.stat(destdir)
        except OSError:
            subprocess.call(["mkdir", "-p", destdir])

        entry = ( file, destfile )
        filelist.append(entry)

    job_count = 0

    for entry in filelist:
        while job_count >= parallel:
            os.wait()
            job_count -= 1

        do_background_encode(entry[0], entry[1])
        job_count += 1
    
    while job_count > 0:
        os.wait()
        job_count -= 1

if __name__ == "__main__":
    main(sys.argv[1:])
